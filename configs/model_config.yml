logistic_regression:
  model: 'sklearn.linear_model.LogisticRegression'
  param_grid:
    'prob_transf__model__penalty': ['l1', 'l2']            # Tipo de penalización
    'prob_transf__model__solver': ['liblinear', 'saga']    # Método del solucionador
    'prob_transf__model__max_iter': [100, 200, 300]         # Número máximo de iteraciones
    'prob_transf__model__fit_intercept': [True, False]       # Ajuste del intercepto
    'prob_transf__model__random_state': [42]

random_forest:
  model: 'sklearn.ensemble.RandomForestClassifier'
  param_grid:
    'stacking__prob_transf__model__n_estimators': [100, 200] # Número de árboles en el bosque
    'stacking__prob_transf__model__max_depth': [2, 3, 5]         # Profundidad máxima de los árboles
    'stacking__prob_transf__model__min_samples_split': [2]         # Número mínimo de muestras requeridas para dividir un nodo
    'stacking__prob_transf__model__min_samples_leaf': [1]            # Número mínimo de muestras requeridas en cada hoja
    'stacking__prob_transf__model__random_state': [42]
    'stacking__prob_transf__model__class_weight': ['balanced_subsample']


gradient_boosting:
  model: 'xgboost.XGBClassifier'
  param_grid:
      "prob_transf__model__objective": ['binary:logistic']
      "prob_transf__model__max_depth": [2, 3, 4, 5, 6]
      "prob_transf__model__n_estimators": [5, 10, 15, 20]
      "prob_transf__model__learning_rate": [0.05, 0.01, 0.1]
      'prob_transf__model__random_state': [42]
      # 'prob_transf__model__lambda': [1.0]
      # 'prob_transf__model__alpha': [0.0]
      # 'prob_transf__model__gamma': [0.1]
      # 'prob_transf__model__colsample_bytree': [0.8]
      # 'prob_transf__model__subsample': [0.8]
      # 'prob_transf__model__scale_pos_weight': [1, 2, 5, 10]

neural_network:
  model: 'sklearn.neural_network.MLPClassifier'
  param_grid:
    "prob_transf__model__hidden_layer_sizes": 
      - [3,]
      - [5,]
      - [10,]
      - [50,] 
      - [100,]
    "prob_transf__model__activation": ['relu', 'tanh', 'logistic']
    "prob_transf__model__solver": ['sgd', 'adam']
    "prob_transf__model__alpha": [0.0001, 0.001, 0.01]
    'prob_transf__model__random_state': [42]
